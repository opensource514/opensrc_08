name: CI

on:
  workflow_call:

jobs:
  commitlint:
    # runs-on: ubuntu-22.04
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install required dependencies
        run: |
          sudo apt update
          sudo apt install -y sudo
          sudo apt install -y git curl
          curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
          sudo DEBIAN_FRONTEND=noninteractive apt install -y nodejs
      - name: Print versions
        run: |
          git --version
          node --version
          npm --version
          npx commitlint --version
      - name: Install commitlint
        run: |
          npm install conventional-changelog-conventionalcommits
          npm install commitlint@latest
          npm install --save-dev @commitlint/{config-conventional,cli}
          
      - name: Configure commitlint
        run: |
          # for the required format, check https://github.com/conventional-changelog/commitlint/tree/master/@commitlint/config-conventional
          echo "module.exports = {extends: ['@commitlint/config-conventional']}" > commitlint.config.js

      - name: Validate current commit (last commit) with commitlint
        if: github.event_name == 'push'
        run: npx commitlint --from HEAD~1 --to HEAD --verbose
        id: push_commitlint

      - name: Validate PR commits with commitlint
        if: github.event_name == 'pull_request'
        run: npx commitlint --from ${{ github.event.pull_request.head.sha }}~${{ github.event.pull_request.commits }} --to ${{ github.event.pull_request.head.sha }} --verbose 
        id: pr_commitlint

      - name: Set annotation
        if: ${{ failure() }}
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { GitHub } = require('@actions/github');

            async function run() {
              const octokit = new GitHub(process.env.GITHUB_TOKEN);
  
              const { data } = await octokit.rest.checks.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                check_run_id: context.payload.workflow_run.id,
              });

              let output = '';

              if (github.event_name === 'push') {
                output = '${{ steps.push_commitlint.outputs.stdout }}';
              } else if (github.event_name === 'pull_request') {
                output = '${{ steps.pr_commitlint.outputs.stdout }}';
              }

              const annotations = [
                {
                  path: '',
                  start_line: 1,
                  end_line: 1,
                  annotation_level: 'failure',
                  message: output,
                },
              ];

              const updatedData = {
                ...data,
                output: {
                  ...data.output,
                  annotations,
                },
              };

              await octokit.rest.checks.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                check_run_id: context.payload.workflow_run.id,
                output: updatedData.output,
              });
            }

            run();

            # async function run() {
            #   const octokit = new GitHub(process.env.GITHUB_TOKEN);

            #   const { data } = await octokit.rest.checks.get({
            #     owner: context.repo.owner,
            #     repo: context.repo.repo,
            #     check_run_id: context.payload.workflow_run.id,
            #   });
            #   # const { checkRun } = require("@actions/github");

            #   # async function run() {
            #   #   const { data } = await checkRun.get({
            #   #     owner: context.repo.owner,
            #   #     repo: context.repo.repo,
            #   #     check_run_id: context.payload.workflow_run.id,
            #   #   });

            #   let output = "";

            #   if (github.event_name === "push") {
            #     output = "${{ steps.push_commitlint.outputs.stdout }}";
            #   } else if (github.event_name === "pull_request") {
            #     output = "${{ steps.pr_commitlint.outputs.stdout }}";
            #   }

            #   const annotations = [
            #     {
            #       path: "",
            #       start_line: 1,
            #       end_line: 1,
            #       annotation_level: "failure",
            #       message: output,
            #     },
            #   ];

            #   const updatedData = {
            #     ...data,
            #     output: {
            #       ...data.output,
            #       annotations,
            #     },
            #   };

            #   await checkRun.update({
            #     owner: context.repo.owner,
            #     repo: context.repo.repo,
            #     check_run_id: context.payload.workflow_run.id,
            #     output: updatedData.output,
            #   });
            # }

            # run();
      
      # - name: print error info
      #   if: ${{ failure() }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # run: |
        #   echo "::error file=${{ github.workspace }}/error.log::$(npx commitlint --from HEAD~1 --to HEAD --verbose 2>&1 | tee -a ${GITHUB_WORKSPACE}/error.log)"
        # run: |
        #   npx commitlint --from HEAD~1 --to HEAD --verbose > ${{ github.workspace }}/error.log
        #   echo "::error file=${{ github.workspace }}/error.log::$(cat ${{ github.workspace }}/error.log)"
